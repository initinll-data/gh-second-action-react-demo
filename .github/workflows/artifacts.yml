# Workflow
# by default jobs in workflow run in parallel, use needs to run it sequentially
name: Artifact workflow
on: [push, workflow_dispatch]
jobs:
  # job 1: running unit tests
  unit-test-job:
    # every job has its own runner, basically a VM which is isolated from other jobs VM
    runs-on: ubuntu-latest
    steps:
      # step 1: fetch code from repository to runner
      - name: Step - Get code
        uses: actions/checkout@v4      
      # step 2: Install node js on runner
      - name: Step - Install node
        uses: actions/setup-node@v4
        with:
          node-version: '20.16.0'
      # step 3: verify node version
      - name: Step - Check Node version
        run: node -v
      # step 4: caching dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock/json') }}
      # step 5: Install project dependencies
      - name: Step - Install dependencies
        run: npm ci
      # step 6: Run project lint
      - name: Step - Run lint
        run: npm run lint
      # step 7: Run project tests
      - name: Step - Run tests
        run: npm test
  # job 2: building code
  build-code-job:
    # runs jobs sequntially instead of parallel
    needs: unit-test-job
    # every job has its own runner, basically a VM which is isolated from other jobs VM
    runs-on: ubuntu-latest
    # Passing information between jobs using outputs
    # Job outputs are available to all downstream jobs that depend on this job.
    outputs:
      script-files: ${{ steps.publish.outputs.js-file-name }}
    steps:
      # step 1: fetch code from repository to runner
      - name: Step - Get code
        uses: actions/checkout@v4
      # step 2: Install node js on runner
      - name: Step - Install node
        uses: actions/setup-node@v4
        with:
          node-version: '20.16.0'
      # step 3: verify node version
      - name: Step - Check Node version
        run: node -v
      # step 4: caching dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock/json') }}
      # step 5: Install project dependencies
      - name: Step - Install dependencies
        run: npm ci
      # step 6: Build project
      - name: Step - Build project
        run: npm run build
      # step 7: Publish js file name as job output to be consumer in downstream job
      - name: Step - Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'js-file-name={}' >> $GITHUB_OUTPUT ';'
      # step 8: Upload website artifacts
      - name: Step - Upload artifacts
        uses: actions/upload-artifact@v4
        with:
            # Name of the artifact to upload.
            # Optional. Default is 'artifact'
            name: dist-files
            # A file, directory or wildcard pattern that describes what to upload
            # Required.
            path: dist
            # path: |
            #     dist
            #     package.json
  # job 3: deploying code
  deploy-code-job:
    needs: build-code-job
    runs-on: ubuntu-latest
    steps:
      # step 1: Download website artifacts from previous job
      - name: Step - Download artifacts
        uses: actions/download-artifact@v4
        with:
            name: dist-files
      # step 2: Output artifacts content
      - name: Step - Output contents
        run: ls
      # step 3: Deploy project
      # accessing previous job output
      - name: Step - Output js filename
        run: echo "${{ needs.build-code-job.outputs.script-files }}"
      # step 4: Deploy project
      - name: Step - Deploy project
        run: echo "Deploying..."

